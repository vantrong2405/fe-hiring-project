import { GPAResult, GPAFormData } from '@/types'

function getGraduationRank(gpa: number): { rank: string; description: string } {
  if (gpa >= 3.6) {
    return { rank: 'Xu·∫•t s·∫Øc', description: 'GPA t·ª´ 3.6 - 4.0' }
  } else if (gpa >= 3.2) {
    return { rank: 'Gi·ªèi', description: 'GPA t·ª´ 3.2 - 3.59' }
  } else if (gpa >= 2.5) {
    return { rank: 'Kh√°', description: 'GPA t·ª´ 2.5 - 3.19' }
  } else if (gpa >= 2.0) {
    return { rank: 'Trung b√¨nh', description: 'GPA t·ª´ 2.0 - 2.49' }
  } else {
    return { rank: 'Y·∫øu', description: 'GPA d∆∞·ªõi 2.0' }
  }
}

export function evaluateGPATarget(
  currentGPA: number,
  targetGPA: number,
  remainingCredits: number,
  completedCredits: number
): GPAResult {
  if (targetGPA > 4.0) {
    return {
      status: 'invalid',
      message: 'GPA m·ª•c ti√™u kh√¥ng h·ª£p l·ªá',
      isAchievable: false,
      difficulty: 'extreme',
      icon: '‚ùå',
      color: 'red',
      advice: 'Vui l√≤ng nh·∫≠p GPA m·ª•c ti√™u t·ª´ 0.0 ƒë·∫øn 4.0'
    }
  }

  const totalCredits = completedCredits + remainingCredits
  const improvementThreshold = Math.ceil(totalCredits * 0.05)

  const maxPossibleGPA =
    remainingCredits > 0 ? (currentGPA * completedCredits + 4.0 * remainingCredits) / totalCredits : currentGPA

  const scenario =
    currentGPA === targetGPA
      ? 'equal'
      : currentGPA > targetGPA
        ? 'exceeded'
        : remainingCredits === 0
          ? 'no_credits'
          : 'need_improve'

  switch (scenario) {
    case 'equal':
      const equalRank = getGraduationRank(targetGPA)
      return {
        status: 'achieved',
        message: 'B·∫°n ƒëang ƒë·∫°t ƒë√∫ng GPA m·ª•c ti√™u',
        maxPossibleGPA: Math.round(maxPossibleGPA * 100) / 100,
        isAchievable: true,
        difficulty: 'medium',
        icon: 'üéØ',
        color: 'blue',
        advice: `B·∫°n ƒë√£ ƒë·∫°t m·ª•c ti√™u. Gi·ªØ ·ªïn ƒë·ªãnh k·∫øt qu·∫£ hi·ªán t·∫°i ƒë·ªÉ duy tr√¨ x·∫øp lo·∫°i ${equalRank.rank.toLowerCase()}.`,
        graduationRank: equalRank.rank,
        rankDescription: equalRank.description
      }

    case 'exceeded':
      const exceededRank = getGraduationRank(currentGPA)
      return {
        status: 'exceeded',
        message: 'B·∫°n ƒë√£ v∆∞·ª£t m·ª•c ti√™u',
        maxPossibleGPA: Math.round(maxPossibleGPA * 100) / 100,
        isAchievable: true,
        difficulty: 'easy',
        icon: 'üèÜ',
        color: 'green',
        advice: `B·∫°n ƒë√£ v∆∞·ª£t m·ª•c ti√™u. Duy tr√¨ phong ƒë·ªô ƒë·ªÉ ƒë·∫°t lo·∫°i ${exceededRank.rank.toLowerCase()} ho·∫∑c h∆°n.`,
        graduationRank: exceededRank.rank,
        rankDescription: exceededRank.description
      }

    case 'no_credits':
      if (currentGPA >= targetGPA) {
        const completedRank = getGraduationRank(currentGPA)
        return {
          status: 'completed',
          message: 'B·∫°n ƒë√£ ho√†n t·∫•t v√† ƒë·∫°t ƒë∆∞·ª£c GPA m·ª•c ti√™u',
          maxPossibleGPA: Math.round(maxPossibleGPA * 100) / 100,
          isAchievable: true,
          difficulty: 'easy',
          icon: 'üéì',
          color: 'green',
          advice: `B·∫°n ƒë√£ ƒë·∫°t m·ª•c ti√™u. Gi·ªØ ·ªïn ƒë·ªãnh k·∫øt qu·∫£ hi·ªán t·∫°i ƒë·ªÉ duy tr√¨ x·∫øp lo·∫°i ${completedRank.rank.toLowerCase()}.`,
          graduationRank: completedRank.rank,
          rankDescription: completedRank.description
        }
      } else {
        const improvementCreditsNeeded = Math.ceil(((targetGPA - currentGPA) * completedCredits) / (4.0 - currentGPA))
        const hasImprovementWarning = improvementCreditsNeeded > improvementThreshold
        const currentRank = getGraduationRank(currentGPA)

        return {
          status: 'impossible',
          message: 'Kh√¥ng th·ªÉ ƒë·∫°t GPA m·ª•c ti√™u',
          maxPossibleGPA: Math.round(maxPossibleGPA * 100) / 100,
          isAchievable: false,
          difficulty: 'extreme',
          icon: '‚ùå',
          color: 'red',
          advice: `Kh√¥ng th·ªÉ ƒë·∫°t ${targetGPA} n·∫øu kh√¥ng h·ªçc c·∫£i thi·ªán. K·∫øt qu·∫£ s·∫Ω gi·ªØ ·ªü m·ª©c ${currentRank.rank.toLowerCase()}. ∆Øu ti√™n c·∫£i thi·ªán m√¥n d∆∞·ªõi B.`,
          improvementCreditsNeeded,
          hasImprovementWarning,
          graduationRank: currentRank.rank,
          rankDescription: currentRank.description,
          warning: hasImprovementWarning
            ? `‚ö†Ô∏è C·∫£nh b√°o: C·∫ßn h·ªçc c·∫£i thi·ªán ${improvementCreditsNeeded} t√≠n ch·ªâ (>${improvementThreshold} t√≠n ch·ªâ = 5% t·ªïng ch∆∞∆°ng tr√¨nh). C√≥ th·ªÉ b·ªã h·∫° b·∫±ng t·ªët nghi·ªáp ƒë·ªëi v·ªõi gi·ªèi v√† xu·∫•t s·∫Øc!`
            : undefined
        }
      }

    case 'need_improve':
      const currentTotalPoints = currentGPA * completedCredits
      const targetTotalPoints = targetGPA * totalCredits
      const requiredPoints = targetTotalPoints - currentTotalPoints

      if (maxPossibleGPA < targetGPA) {
        const improvementCreditsNeeded = Math.ceil(((targetGPA - maxPossibleGPA) * totalCredits) / (4.0 - currentGPA))
        const hasImprovementWarning = improvementCreditsNeeded > improvementThreshold
        const maxRank = getGraduationRank(maxPossibleGPA)

        return {
          status: 'impossible',
          message: 'Kh√¥ng kh·∫£ thi ƒë·ªÉ ƒë·∫°t GPA m·ª•c ti√™u',
          maxPossibleGPA: Math.round(maxPossibleGPA * 100) / 100,
          isAchievable: false,
          difficulty: 'extreme',
          icon: '‚ùå',
          color: 'red',
          advice: `D√π b·∫°n ƒë·∫°t to√†n b·ªô A c≈©ng kh√¥ng th·ªÉ l√™n ${targetGPA}. T·ªëi ƒëa ch·ªâ ƒë·∫°t ${maxPossibleGPA.toFixed(3)} (${maxRank.rank.toLowerCase()}). H√£y c√¢n nh·∫Øc h·ªçc c·∫£i thi·ªán.`,
          improvementCreditsNeeded,
          hasImprovementWarning,
          graduationRank: maxRank.rank,
          rankDescription: `T·ªëi ƒëa c√≥ th·ªÉ ƒë·∫°t: ${maxRank.description}`,
          warning: hasImprovementWarning
            ? `‚ö†Ô∏è C·∫£nh b√°o: C·∫ßn h·ªçc c·∫£i thi·ªán ${improvementCreditsNeeded} t√≠n ch·ªâ (>${improvementThreshold} t√≠n ch·ªâ = 5% t·ªïng ch∆∞∆°ng tr√¨nh). C√≥ th·ªÉ b·ªã h·∫° b·∫±ng t·ªët nghi·ªáp ƒë·ªëi v·ªõi gi·ªèi v√† xu·∫•t s·∫Øc!`
            : undefined
        }
      } else if (Math.abs(maxPossibleGPA - targetGPA) < 0.01) {
        const targetRank = getGraduationRank(targetGPA)
        return {
          status: 'need_perfect',
          message: 'C·∫ßn ƒë·∫°t to√†n b·ªô A ƒë·ªÉ ƒë·∫°t m·ª•c ti√™u',
          maxPossibleGPA: Math.round(maxPossibleGPA * 100) / 100,
          isAchievable: true,
          difficulty: 'extreme',
          icon: 'üî•',
          color: 'orange',
          advice: `ƒê·ªÉ ƒë·∫°t ${targetGPA}, b·∫°n c·∫ßn ƒë·∫°t t·ªëi thi·ªÉu ƒëi·ªÉm A (4.0) ·ªü to√†n b·ªô m√¥n c√≤n l·∫°i.`,
          graduationRank: targetRank.rank,
          rankDescription: targetRank.description
        }
      } else {
        const averageGradeNeeded = requiredPoints / remainingCredits
        const difficultyLevel =
          averageGradeNeeded >= 4.0
            ? 'extreme'
            : averageGradeNeeded > 3.65
              ? 'extreme'
              : averageGradeNeeded > 3.0
                ? 'hard'
                : 'medium'
        const targetRank = getGraduationRank(targetGPA)

        let gradeDescription = ''
        if (averageGradeNeeded >= 4.0) {
          gradeDescription = 'A/A+ (4.0)'
        } else if (averageGradeNeeded > 3.65) {
          gradeDescription = 'A/A+ (4.0)'
        } else if (averageGradeNeeded > 3.33) {
          gradeDescription = 'A- (3.65)'
        } else if (averageGradeNeeded > 3.0) {
          gradeDescription = 'B+ (3.33)'
        } else if (averageGradeNeeded > 2.65) {
          gradeDescription = 'B (3.0)'
        } else if (averageGradeNeeded > 2.33) {
          gradeDescription = 'B- (2.65)'
        } else if (averageGradeNeeded > 2.0) {
          gradeDescription = 'C+ (2.33)'
        } else if (averageGradeNeeded > 1.65) {
          gradeDescription = 'C (2.0)'
        } else if (averageGradeNeeded > 1.0) {
          gradeDescription = 'C- (1.65)'
        } else {
          gradeDescription = 'D (1.0)'
        }

        let specificAdvice = ''
        if (averageGradeNeeded >= 4.0) {
          specificAdvice = `C·∫ßn ƒë·∫°t ƒëi·ªÉm A/A+ (4.0) cho to√†n b·ªô m√¥n c√≤n l·∫°i.`
        } else if (averageGradeNeeded > 3.65) {
          specificAdvice = `C·∫ßn ƒë·∫°t t·ªëi thi·ªÉu ${gradeDescription} m·ªói m√¥n trong ph·∫ßn c√≤n l·∫°i.`
        } else if (averageGradeNeeded >= 2.0) {
          specificAdvice = `ƒê·ªÉ ƒë·∫°t ${targetGPA}, b·∫°n c·∫ßn ƒë·∫°t t·ªëi thi·ªÉu ${gradeDescription} m·ªói m√¥n c√≤n l·∫°i.`
        } else {
          specificAdvice = `C·∫ßn ƒë·∫°t t·ªëi thi·ªÉu ${gradeDescription} cho ${remainingCredits} t√≠n ch·ªâ c√≤n l·∫°i. M·ª•c ti√™u d·ªÖ ƒë·∫°t ƒë∆∞·ª£c.`
        }

        return {
          status: 'achievable',
          message: 'Kh·∫£ thi! C√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c GPA m·ª•c ti√™u',
          maxPossibleGPA: Math.round(maxPossibleGPA * 100) / 100,
          isAchievable: true,
          difficulty: difficultyLevel,
          icon: 'üí™',
          color: 'green',
          advice: specificAdvice,
          graduationRank: targetRank.rank,
          rankDescription: targetRank.description
        }
      }

    default:
      return {
        status: 'invalid',
        message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        isAchievable: false,
        difficulty: 'extreme',
        icon: '‚ùå',
        color: 'red',
        advice: 'Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ƒë·∫ßu v√†o.'
      }
  }
}
